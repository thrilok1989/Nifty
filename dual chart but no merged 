import streamlit as st from streamlit_autorefresh import st_autorefresh import requests import pandas as pd import numpy as np from datetime import datetime from pytz import timezone import plotly.graph_objects as go

=== Streamlit Config ===

st.set_page_config(page_title="Nifty Options Dual Chart Analyzer", layout="wide") st_autorefresh(interval=120000, key="datarefresh")  # Refresh every 2 mins

=== Session State Tracker ===

if 'price_history' not in st.session_state: st.session_state.price_history = []

=== Dummy Data Fetching Function (replace with real NSE fetch) ===

def fetch_market_data(): spot_price = np.random.randint(21800, 22200)  # Simulated price market_view = np.random.choice(["Bullish", "Strong Bullish", "Neutral", "Bearish", "Strong Bearish"]) support_zones = [(21850, 21900)] resistance_zones = [(22100, 22150)] return spot_price, market_view, support_zones, resistance_zones

=== Helper Function: Check if price inside zone ===

def is_spot_within_zone(spot, zones): for low, high in zones: if low <= spot <= high: return True return False

=== Prediction Logic ===

def predict_next_move(price_history, market_view, support_zones, resistance_zones, spot): if len(price_history) < 3: return "Neutral", "gray"

last_prices = [x[1] for x in price_history[-3:]]
recent_momentum = last_prices[-1] - last_prices[0]

if market_view in ["Strong Bullish", "Bullish"]:
    if is_spot_within_zone(spot, support_zones) and recent_momentum >= 0:
        return "UP", "green"
if market_view in ["Strong Bearish", "Bearish"]:
    if is_spot_within_zone(spot, resistance_zones) and recent_momentum <= 0:
        return "DOWN", "red"

return "Neutral", "gray"

=== Price Chart Plot ===

def plot_price_action_chart(price_history, support_zones, resistance_zones): times = [x[0] for x in price_history] prices = [x[1] for x in price_history]

fig = go.Figure()
fig.add_trace(go.Scatter(x=times, y=prices, mode='lines+markers', name='Spot Price', line=dict(color='blue')))

for low, high in support_zones:
    fig.add_shape(type="rect", xref="x", yref="y",
                  x0=times[0], x1=times[-1], y0=low, y1=high,
                  fillcolor="lightgreen", opacity=0.2, line_width=0)

for low, high in resistance_zones:
    fig.add_shape(type="rect", xref="x", yref="y",
                  x0=times[0], x1=times[-1], y0=low, y1=high,
                  fillcolor="lightcoral", opacity=0.2, line_width=0)

fig.update_layout(
    title="\U0001F4C8 Nifty Spot Price Action (Live)",
    xaxis_title="Time",
    yaxis_title="Spot Price",
    yaxis=dict(side="right"),
    height=500,
    xaxis=dict(showgrid=True, tickformat="%H:%M"),
    showlegend=False
)

st.plotly_chart(fig, use_container_width=True)

=== Prediction Chart Plot ===

def plot_prediction_chart(price_history, prediction, color): times = [x[0] for x in price_history] prices = [x[1] for x in price_history]

fig = go.Figure()
fig.add_trace(go.Scatter(x=times, y=prices, mode='lines+markers', name='Spot Price', line=dict(color='blue')))

if prediction == "UP":
    fig.add_annotation(x=times[-1], y=prices[-1],
                       text="\U0001F53C Predict UP",
                       showarrow=True, arrowhead=1, arrowcolor=color,
                       ax=0, ay=-60, font=dict(color=color, size=14))
elif prediction == "DOWN":
    fig.add_annotation(x=times[-1], y=prices[-1],
                       text="\U0001F53D Predict DOWN",
                       showarrow=True, arrowhead=1, arrowcolor=color,
                       ax=0, ay=60, font=dict(color=color, size=14))
else:
    fig.add_annotation(x=times[-1], y=prices[-1],
                       text="\u23F8 Neutral",
                       showarrow=False, font=dict(color=color, size=14))

fig.update_layout(
    title="\U0001F52E Predicted Move Based on Bias + Zone + Momentum",
    xaxis_title="Time",
    yaxis_title="Price",
    yaxis=dict(side="right"),
    height=400,
    margin=dict(l=20, r=20, t=40, b=20)
)

st.plotly_chart(fig, use_container_width=True)

=== Main Logic ===

def main(): spot_price, market_view, support_zones, resistance_zones = fetch_market_data() now = datetime.now(timezone("Asia/Kolkata")) st.session_state.price_history.append((now, spot_price)) st.session_state.price_history = st.session_state.price_history[-30:]  # Keep 1 hr data

st.subheader(f"\U0001F4CC Spot Price: {spot_price} | Market View: {market_view}")

# Plot Live Chart
plot_price_action_chart(st.session_state.price_history, support_zones, resistance_zones)

# Predict Next Move
prediction, color = predict_next_move(st.session_state.price_history, market_view, support_zones, resistance_zones, spot_price)
plot_prediction_chart(st.session_state.price_history, prediction, color)

if name == "main": main()

